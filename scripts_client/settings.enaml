from enaml.layout.api import *
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *

from CameraNetwork import global_settings as gs


#
# Settings popup window.
#
enamldef ServerConfigPopup(PopupView): SettingsPopup:
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    window_type = 'window'

    attr client_model
    attr server_model

    VGroup:
        Notebook:
            tab_style = 'preferences'
            foreground = 'white'
            background = 'rgba(30, 30, 30, 0.85)'

            Page:
                title = 'General'
                closable = False
                foreground = 'white'
                background = 'rgba(30, 30, 30, 0.85)'

                Form:
                    padding = 20

                    Label:
                        foreground = 'white'
                        text = 'Internet Fails'
                    SpinBox: internet_failures:
                        minimum = 0
                        maximum = 5000
                    Label:
                        foreground = 'white'
                        text = 'SunShader Min'
                    SpinBox: sunshader_min:
                        minimum = 0
                        maximum = 30
                        value := server_model.camera_settings[gs.SUNSHADER_MIN_ANGLE]
                    Label:
                        foreground = 'white'
                        text = 'SunShader Max'
                    SpinBox: sunshader_max:
                        minimum = 150
                        maximum = 180
                        value := server_model.camera_settings[gs.SUNSHADER_MAX_ANGLE]
                    Label:
                        foreground = 'white'
                        text = 'Longitude'
                    FloatField: longitude:
                        value := server_model.camera_settings[gs.CAMERA_LONGITUDE]
                    Label:
                        foreground = 'white'
                        text = 'Latitude'
                    FloatField: latitude:
                        value := server_model.camera_settings[gs.CAMERA_LATITUDE]
                    Label:
                        foreground = 'white'
                        text = 'Altitude'
                    SpinBox: altitude:
                        minimum = -200
                        maximum = 3600
                        value := server_model.camera_settings[gs.CAMERA_ALTITUDE]

            Page:
                title = 'Capture'
                closable = False
                foreground = 'white'
                background = 'rgba(30, 30, 30, 0.85)'

                Form:
                    padding = 20

                    Label:
                        foreground = 'white'
                        text = 'Start Loop'
                    CheckBox: start_loop:
                        checked := server_model.camera_settings[gs.START_LOOP]
                    Label:
                        foreground = 'white'
                        text = 'Loop Delay'
                    SpinBox: loop_delay:
                        minimum = 2
                        maximum = 3600
                        value := server_model.camera_settings[gs.LOOP_DELAY]
                    Label:
                        foreground = 'white'
                        text = 'Calib delay'
                    SpinBox: calib_delay:
                        minimum = 2
                        maximum = 100
                        value := server_model.camera_settings[gs.CALIBRATION_DELAY]
                        value := server_model.camera_settings[gs.INTERNET_FAILURE_THRESH]
                    Label:
                        foreground = 'white'
                        text = 'Upload Jpeg'
                    CheckBox: upload_jpg:
                        checked := server_model.camera_settings[gs.UPLOAD_JPG_FILE]
                    Label:
                        foreground = 'white'
                        text = 'Upload Mat'
                    CheckBox: upload_mat:
                        checked := server_model.camera_settings[gs.UPLOAD_MAT_FILE]
                    Label:
                        foreground = 'white'
                        text = 'Period'
                    ComboBox: daynight:
                        index = 0
                        items = [gs.DAY_SETTINGS, gs.NIGHT_SETTINGS]
                    Label:
                        foreground = 'white'
                        text = 'Shutter [uS]'
                    IntField: shutter:
                        value := server_model.camera_settings[daynight.selected_item][gs.IMAGE_EXPOSURE]
                    Label:
                        foreground = 'white'
                        text = 'GAIN'
                    IntField: gain:
                        minimum = 0
                        maximum = 100
                        value << int(server_model.camera_settings[daynight.selected_item][gs.IMAGE_GAIN])
                        value >> server_model.camera_settings[daynight.selected_item][gs.IMAGE_GAIN]
                    Label:
                        foreground = 'white'
                        text = 'Gain Boost'
                    CheckBox: gain_boost:
                        checked := server_model.camera_settings[daynight.selected_item][gs.GAIN_BOOST]
                    Label:
                        foreground = 'white'
                        text = 'Frames #'
                    SpinBox: frames_num_1:
                        minimum = 1
                        maximum = 30
                        value := server_model.camera_settings[daynight.selected_item][gs.FRAMES_NUM]
                    Label:
                        foreground = 'white'
                        text = 'HDR frames'
                        tool_tip = 'Number of HDR exposures (1 for no HDR)'
                    SpinBox: hdr_mode:
                        minimum = 1
                        maximum = 8
                        value := server_model.camera_settings[daynight.selected_item][gs.HDR_MODE]
                    Label:
                        foreground = 'white'
                        text = 'Mode'
                    ComboBox: cmode:
                        index << cmode.items.index(server_model.camera_settings[daynight.selected_item][gs.COLOR_MODE])
                        index ::
                            server_model.camera_settings[daynight.selected_item][gs.COLOR_MODE] = cmode.items[cmode.index]
                        items = [gs.COLOR_RAW, gs.COLOR_RGB]

        GroupBox:
            PushButton:
                text = 'Update'
                clicked ::
                    client_model.send_message(
                        server_model,
                        gs.MSG_TYPE_SET_SETTINGS,
                        kwds=dict(capture_settings=server_model.camera_settings)
                    )
                    SettingsPopup.close()


enamldef ReconstructionConfigPopup(PopupView): popup:
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'

    attr client_model

    Form:
        Label:
            text = 'Latitude:'
        FloatField: latitude:
            value := client_model.latitude

        Label:
            text = 'Longitude:'
        FloatField: longitude:
            value := client_model.longitude

        Label:
            text = 'Altitude:'
        IntField: altitude:
            value := client_model.altitude

