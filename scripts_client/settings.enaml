from enaml.layout.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *

from CameraNetwork import global_settings as gs


#
# Server Settings dialog.
#
enamldef SettingsDialog(Dialog): ServerSettingsPopup:
    title = 'Server Settings {}'.format(server_model.server_id)
    attr client_model
    attr server_model

    VGroup:
        Notebook:
            tab_style = 'preferences'

            Page:
                title = 'General'
                closable = False

                Form:
                    padding = 20

                    Label:
                        text = 'Internet Fails'
                    SpinBox: internet_failures:
                        minimum = 0
                        maximum = 5000
                        value := server_model.camera_settings[gs.INTERNET_FAILURE_THRESH]
                    Label:
                        text = 'SunShader Min'
                    SpinBox: sunshader_min:
                        minimum = 0
                        maximum = 30
                        value := server_model.camera_settings[gs.SUNSHADER_MIN_ANGLE]
                    Label:
                        text = 'SunShader Max'
                    SpinBox: sunshader_max:
                        minimum = 150
                        maximum = 180
                        value := server_model.camera_settings[gs.SUNSHADER_MAX_ANGLE]
                    Label:
                        text = 'Longitude'
                    FloatField: longitude:
                        value := server_model.camera_settings[gs.CAMERA_LONGITUDE]
                    Label:
                        text = 'Latitude'
                    FloatField: latitude:
                        value := server_model.camera_settings[gs.CAMERA_LATITUDE]
                    Label:
                        text = 'Altitude'
                    SpinBox: altitude:
                        minimum = -200
                        maximum = 3600
                        value := server_model.camera_settings[gs.CAMERA_ALTITUDE]

            Page:
                title = 'Capture'
                closable = False

                Form:
                    padding = 20

                    Label:
                        text = 'Start Loop'
                    CheckBox: start_loop:
                        checked := server_model.capture_settings[gs.START_LOOP]
                    Label:
                        text = 'Upload Jpeg'
                    CheckBox: upload_jpg:
                        checked := server_model.capture_settings[gs.UPLOAD_JPG_FILE]
                    Label:
                        text = 'Upload Mat'
                    CheckBox: upload_mat:
                        checked := server_model.capture_settings[gs.UPLOAD_MAT_FILE]
                    Label:
                        text = 'Period'
                    ComboBox: daynight:
                        index = 0
                        items = [gs.DAY_SETTINGS, gs.NIGHT_SETTINGS]
                    Label:
                        text = 'Loop Delay'
                    SpinBox: loop_delay:
                        minimum = 2
                        maximum = 3600
                        value := server_model.capture_settings[daynight.selected_item][gs.LOOP_DELAY]
                    Label:
                        text = 'Shutter [uS]'
                    IntField: shutter:
                        value := server_model.capture_settings[daynight.selected_item][gs.IMAGE_EXPOSURE]
                    Label:
                        text = 'GAIN'
                    IntField: gain:
                        minimum = 0
                        maximum = 100
                        value << int(server_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN])
                        value >> server_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN]
                    Label:
                        text = 'Gain Boost'
                    CheckBox: gain_boost:
                        checked := server_model.capture_settings[daynight.selected_item][gs.GAIN_BOOST]
                    Label:
                        text = 'Frames #'
                    SpinBox: frames_num_1:
                        minimum = 1
                        maximum = 30
                        value := server_model.capture_settings[daynight.selected_item][gs.FRAMES_NUM]
                    Label:
                        text = 'HDR frames'
                        tool_tip = 'Number of HDR exposures (1 for no HDR)'
                    SpinBox: hdr_mode:
                        minimum = 1
                        maximum = 8
                        value := server_model.capture_settings[daynight.selected_item][gs.HDR_MODE]
                    Label:
                        text = 'Mode'
                    ComboBox: cmode:
                        index << cmode.items.index(server_model.capture_settings[daynight.selected_item][gs.COLOR_MODE])
                        index ::
                            server_model.capture_settings[daynight.selected_item][gs.COLOR_MODE] = cmode.items[cmode.index]
                        items = [gs.COLOR_RAW, gs.COLOR_RGB]

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('Update', 'accept'),
                DialogButton('Cancel', 'reject'),
            ]


#
# Client Settings dialog window.
# Note:
# The difference between client and server (above) settings is that the
# server settings dialog allows changing both camera and capture settings.
# The client settings allow changing only the capture settings.
#
enamldef GlobalSettingsDialog(Dialog): ClientSettingsPopup:
    title = 'Global Capture Settings'
    attr client_model

    VGroup:
        Form:
            padding = 20

            Label:
                text = 'Start Loop'
            CheckBox: start_loop:
                checked := client_model.capture_settings[gs.START_LOOP]
            Label:
                text = 'Upload Jpeg'
            CheckBox: upload_jpg:
                checked := client_model.capture_settings[gs.UPLOAD_JPG_FILE]
            Label:
                text = 'Upload Mat'
            CheckBox: upload_mat:
                checked := client_model.capture_settings[gs.UPLOAD_MAT_FILE]
            Label:
                text = 'Period'
            ComboBox: daynight:
                index = 0
                items = [gs.DAY_SETTINGS, gs.NIGHT_SETTINGS]
            Label:
                text = 'Loop Delay'
            SpinBox: loop_delay:
                minimum = 2
                maximum = 3600
                value := client_model.capture_settings[daynight.selected_item][gs.LOOP_DELAY]
            Label:
                text = 'Shutter [uS]'
            IntField: shutter:
                value := client_model.capture_settings[daynight.selected_item][gs.IMAGE_EXPOSURE]
            Label:
                text = 'GAIN'
            IntField: gain:
                minimum = 0
                maximum = 100
                value << int(client_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN])
                value >> client_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN]
            Label:
                text = 'Gain Boost'
            CheckBox: gain_boost:
                checked := client_model.capture_settings[daynight.selected_item][gs.GAIN_BOOST]
            Label:
                text = 'Frames #'
            SpinBox: frames_num_1:
                minimum = 1
                maximum = 30
                value := client_model.capture_settings[daynight.selected_item][gs.FRAMES_NUM]
            Label:
                text = 'HDR frames'
                tool_tip = 'Number of HDR exposures (1 for no HDR)'
            SpinBox: hdr_mode:
                minimum = 1
                maximum = 8
                value := client_model.capture_settings[daynight.selected_item][gs.HDR_MODE]
            Label:
                text = 'Mode'
            ComboBox: cmode:
                index << cmode.items.index(client_model.capture_settings[daynight.selected_item][gs.COLOR_MODE])
                index ::
                    client_model.capture_settings[daynight.selected_item][gs.COLOR_MODE] = cmode.items[cmode.index]
                items = [gs.COLOR_RAW, gs.COLOR_RGB]

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('Update', 'accept'),
                DialogButton('Cancel', 'reject'),
            ]


#
# Reconstruction settings popup.
# Allows setting the center of the local reconstruction
# framework.
#
enamldef ReconstructionConfigPopup(PopupView): popup:
    attr client_model

    Container:
        GroupBox:
            title = 'Local Coords Center'

            Form:
                Label:
                    text = 'Latitude:'
                FloatField: latitude:
                    value := client_model.latitude

                Label:
                    text = 'Longitude:'
                FloatField: longitude:
                    value := client_model.longitude

                Label:
                    text = 'Altitude:'
                IntField: altitude:
                    value := client_model.altitude

        GroupBox:
            title = 'LIDAR Grid'

            Form:
                Label:
                    text = 'delx:'
                FloatField: delx:
                    tool_tip = "Delta X of Lidar Grid [m]"
                    value := client_model.delx

                Label:
                    text = 'dely:'
                FloatField: dely:
                    tool_tip = "Delta Y of Lidar Grid [m]"
                    value := client_model.dely

                Label:
                    text = 'delz:'
                FloatField: delz:
                    tool_tip = "Delta X of Lidar Grid [m]"
                    value := client_model.delz

                Label:
                    text = 'TOG:'
                FloatField: TOG:
                    tool_tip = "Top of Lidar Grid [m]"
                    value := client_model.TOG

                Label:
                    text = 'Grabcut Threshold:'
                FloatField: grabcut_threshold:
                    tool_tip = "Threshold for the sunshader segmentation."
                    value := client_model.grabcut_threshold


