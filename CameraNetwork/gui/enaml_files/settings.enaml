from enaml.core.api import Looper
from enaml.layout.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *

from CameraNetwork import global_settings as gs


#
# Array settings dialog.
#
enamldef ArraySettingsDialog(Dialog): arrays_dialog:
    attr array_model
    attr image_widget
    modality = 'non_modal'

    Container:
        Form:
            Label:
                text = "Show Almucantar"
            CheckBox: almucantar:
                tool_tip = "Show the Almucantar"
                checked := image_widget.show_almucantar

            Label:
                text = "Show PrincipalPlane"
            CheckBox: principal:
                tool_tip = "Show the PrincipalPlane"
                checked := image_widget.show_principalplane

            Label:
                text = 'Sunshader Threshold'
            FloatField: grabcut_val:
                tool_tip = "Sunshader grabcut threshold."
                value := array_model.grabcut_threshold

            Label:
                text = 'Sunmask Radius'
            FloatField: sunmask_val:
                minimum = 0.05
                maximum = 0.25
                tool_tip = "Sun mask gaussian radius."
                value := array_model.sun_mask_radius

#
# Capture settings
#
enamldef CaptureDialog(Dialog): capture_dialog:
    attr main_model
    modality = 'non_modal'

    Container:
        Form:
            Label: exposure_lbl:
                text = 'Exp[us]:'
            IntField: exposure_fld:
                minimum = 0
                value = 500

            Label: gain_lbl:
                text = 'Gain Boost:'
            CheckBox: gain_cb:
                tool_tip = "Apply gain boost to the capture"

            Label: HDR_lbl:
                text = "HDR"
            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False

            Label: jpeg_lbl:
                text = "JPEG"
            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True

            Label: jpeg_quality_lbl:
                text = "Jpeg Quality"
            IntField: quality_fld:
                tool_tip = "Quality of JPEG compression"
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

            Label: resolution_lbl:
                text = 'Resolution:'
            IntField: resolution_fld:
                tool_tip = "Image resolution"
                minimum = 101
                value = 301

            PushButton: get_pb:
                text = 'Capture'
                clicked ::
                    main_model.clear_map()
                    main_model.broadcast_message(
                        gs.MSG_TYPE_ARRAY,
                        kwds=dict(
                            exposure_us=exposure_fld.value,
                            gain_db=0,
                            frames_num=1,
                            color_mode=gs.COLOR_RAW,
                            gain_boost=gain_cb.checked,
                            normalize=True,
                            jpeg=quality_fld.value if JPEG_cb.checked else False,
                            resolution=resolution_fld.value
                        )
                    )


#
# Arrays settings dialog.
#
enamldef ArraysSettingsDialog(Dialog): array_dialog:
    attr arrays_model
    modality = 'non_modal'

    Container:
        Form:
            Label: type_lbl:
                text = 'View Type'
            ComboBox: type_combo:
                tool_tip = "Type of displayed image."
                items = ['Image', 'Mask', 'Sun Mask']
                selected_item >> arrays_model.image_type

            Label: intensity_lbl:
                text = 'Intensity Level'
            IntField: intensity_txt:
                tool_tip = "Control the intensity of the displayed image."
                minimum = 1
                maximum = 1000
                value := arrays_model.intensity

            Label: gamma_lbl:
                text = 'Gamma Correction'
            CheckBox: gamma_cb:
                tool_tip = "Apply Gamma correction to the Image"
                checked := arrays_model.gamma

            Label: grid_lbl:
                text = "Show Grid"
            CheckBox: grid_cb:
                tool_tip = "Show the reconstrction grid"
                checked := arrays_model.show_grid

            Label: rois_lbl:
                text = "Show ROIs"
            CheckBox: ROIs_cb:
                tool_tip = "Show the camera ROIs"
                checked := arrays_model.show_ROIs

            Label: masks_lbl:
                text = "Show Masks"
            CheckBox: masks_cb:
                tool_tip = "Show the camera Masks"
                checked := arrays_model.show_masks


#
# Server Settings dialog.
#
enamldef SettingsDialog(Dialog): ServerSettingsPopup:
    title = 'Server Settings {}'.format(server_model.server_id)
    attr main_model
    attr server_model

    VGroup:
        Notebook:
            tab_style = 'preferences'

            Page:
                title = 'General'
                closable = False

                Form:
                    padding = 20

                    Label:
                        text = 'Internet Fails'
                    SpinBox: internet_failures:
                        minimum = 0
                        maximum = 5000
                        value := server_model.camera_settings[gs.INTERNET_FAILURE_THRESH]
                    Label:
                        text = 'SunShader Min'
                    SpinBox: sunshader_min:
                        minimum = 0
                        maximum = 30
                        value := server_model.camera_settings[gs.SUNSHADER_MIN_ANGLE]
                    Label:
                        text = 'SunShader Max'
                    SpinBox: sunshader_max:
                        minimum = 150
                        maximum = 180
                        value := server_model.camera_settings[gs.SUNSHADER_MAX_ANGLE]
                    Label:
                        text = 'Longitude'
                    FloatField: longitude:
                        value := server_model.camera_settings[gs.CAMERA_LONGITUDE]
                    Label:
                        text = 'Latitude'
                    FloatField: latitude:
                        value := server_model.camera_settings[gs.CAMERA_LATITUDE]
                    Label:
                        text = 'Altitude'
                    SpinBox: altitude:
                        minimum = -200
                        maximum = 3600
                        value := server_model.camera_settings[gs.CAMERA_ALTITUDE]

            Page:
                title = 'Capture'
                closable = False

                Form:
                    padding = 20

                    Label:
                        text = 'Start Loop'
                    CheckBox: start_loop:
                        checked := server_model.capture_settings[gs.START_LOOP]
                    Label:
                        text = 'Upload Jpeg'
                    CheckBox: upload_jpg:
                        checked := server_model.capture_settings[gs.UPLOAD_JPG_FILE]
                    Label:
                        text = 'Upload Mat'
                    CheckBox: upload_mat:
                        checked := server_model.capture_settings[gs.UPLOAD_MAT_FILE]
                    Label:
                        text = 'Period'
                    ComboBox: daynight:
                        index = 0
                        items = [gs.DAY_SETTINGS, gs.NIGHT_SETTINGS]
                    Label:
                        text = 'Loop Delay'
                    SpinBox: loop_delay:
                        minimum = 2
                        maximum = 3600
                        value := server_model.capture_settings[daynight.selected_item][gs.LOOP_DELAY]
                    Label:
                        text = 'Shutter [uS]'
                    IntField: shutter:
                        value := server_model.capture_settings[daynight.selected_item][gs.IMAGE_EXPOSURE]
                    Label:
                        text = 'GAIN'
                    IntField: gain:
                        minimum = 0
                        maximum = 100
                        value << int(server_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN])
                        value >> server_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN]
                    Label:
                        text = 'Gain Boost'
                    CheckBox: gain_boost:
                        checked := server_model.capture_settings[daynight.selected_item][gs.GAIN_BOOST]
                    Label:
                        text = 'Frames #'
                    SpinBox: frames_num_1:
                        minimum = 1
                        maximum = 30
                        value := server_model.capture_settings[daynight.selected_item][gs.FRAMES_NUM]
                    Label:
                        text = 'HDR frames'
                        tool_tip = 'Number of HDR exposures (1 for no HDR)'
                    SpinBox: hdr_mode:
                        minimum = 1
                        maximum = 8
                        value := server_model.capture_settings[daynight.selected_item][gs.HDR_MODE]
                    Label:
                        text = 'Mode'
                    ComboBox: cmode:
                        index << cmode.items.index(server_model.capture_settings[daynight.selected_item][gs.COLOR_MODE])
                        index ::
                            server_model.capture_settings[daynight.selected_item][gs.COLOR_MODE] = cmode.items[cmode.index]
                        items = [gs.COLOR_RAW, gs.COLOR_RGB]

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('Update', 'accept'),
                DialogButton('Cancel', 'reject'),
            ]


#
# Client Settings dialog window.
# Note:
# The difference between client and server (above) settings is that the
# server settings dialog allows changing both camera and capture settings.
# The client settings allow changing only the capture settings.
#
enamldef GlobalSettingsDialog(Dialog): ClientSettingsPopup:
    title = 'Global Capture Settings'
    attr main_model

    VGroup:
        Form:
            padding = 20

            Label:
                text = 'Upload Jpeg'
            CheckBox: upload_jpg:
                checked := main_model.capture_settings[gs.UPLOAD_JPG_FILE]
            Label:
                text = 'Upload Mat'
            CheckBox: upload_mat:
                checked := main_model.capture_settings[gs.UPLOAD_MAT_FILE]
            Label:
                text = 'Period'
            ComboBox: daynight:
                index = 0
                items = [gs.DAY_SETTINGS, gs.NIGHT_SETTINGS]
            Label:
                text = 'Loop Delay'
            SpinBox: loop_delay:
                minimum = 2
                maximum = 3600
                value := main_model.capture_settings[daynight.selected_item][gs.LOOP_DELAY]
            Label:
                text = 'Shutter [uS]'
            IntField: shutter:
                value := main_model.capture_settings[daynight.selected_item][gs.IMAGE_EXPOSURE]
            Label:
                text = 'GAIN'
            IntField: gain:
                minimum = 0
                maximum = 100
                value << int(main_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN])
                value >> main_model.capture_settings[daynight.selected_item][gs.IMAGE_GAIN]
            Label:
                text = 'Gain Boost'
            CheckBox: gain_boost:
                checked := main_model.capture_settings[daynight.selected_item][gs.GAIN_BOOST]
            Label:
                text = 'Frames #'
            SpinBox: frames_num_1:
                minimum = 1
                maximum = 30
                value := main_model.capture_settings[daynight.selected_item][gs.FRAMES_NUM]
            Label:
                text = 'HDR frames'
                tool_tip = 'Number of HDR exposures (1 for no HDR)'
            SpinBox: hdr_mode:
                minimum = 1
                maximum = 8
                value := main_model.capture_settings[daynight.selected_item][gs.HDR_MODE]
            Label:
                text = 'Mode'
            ComboBox: cmode:
                index << cmode.items.index(main_model.capture_settings[daynight.selected_item][gs.COLOR_MODE])
                index ::
                    main_model.capture_settings[daynight.selected_item][gs.COLOR_MODE] = cmode.items[cmode.index]
                items = [gs.COLOR_RAW, gs.COLOR_RGB]

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('Update', 'accept'),
                DialogButton('Cancel', 'reject'),
            ]


#
# Reconstruction settings dialog.
# Allows setting the center of the local reconstruction
# framework.
#
enamldef ReconstructDialog(Dialog): popup:
    title = 'Export Reconstruction'
    attr main_model

    Container:
        GroupBox:
            title = 'Local Coords Center'

            Form:
                Label:
                    text = 'Latitude:'
                FloatField: latitude:
                    value := main_model.latitude

                Label:
                    text = 'Longitude:'
                FloatField: longitude:
                    value := main_model.longitude

                Label:
                    text = 'Altitude:'
                IntField: altitude:
                    value := main_model.altitude

        GroupBox:
            title = 'LIDAR Grid'

            Form:
                Label:
                    text = 'delx:'
                FloatField: delx:
                    tool_tip = "Delta X of Lidar Grid [m]"
                    value := main_model.delx

                Label:
                    text = 'dely:'
                FloatField: dely:
                    tool_tip = "Delta Y of Lidar Grid [m]"
                    value := main_model.dely

                Label:
                    text = 'delz:'
                FloatField: delz:
                    tool_tip = "Delta X of Lidar Grid [m]"
                    value := main_model.delz

                Label:
                    text = 'mode:'
                ObjectCombo: grid_mode:
                    tool_tip = "Set to auto to bound grid by cameras."
                    items = ["Manual", "Auto"]
                    selected := main_model.grid_mode

                Label:
                    text = 'Grid Length:'
                    visible << grid_mode.selected == "Manual"
                FloatField: grid_length:
                    tool_tip = "Length of Grid (X - East)"
                    visible << grid_mode.selected == "Manual"
                    value := main_model.grid_length

                Label:
                    text = 'Grid Width:'
                    visible << grid_mode.selected == "Manual"
                FloatField: grid_width:
                    tool_tip = "Width of Grid (Y - North)"
                    visible << grid_mode.selected == "Manual"
                    value := main_model.grid_width

                Label:
                    text = 'TOG:'
                FloatField: TOG:
                    tool_tip = "Top of Lidar Grid [m]"
                    value := main_model.TOG

                Label:
                    text = 'Grabcut Threshold:'
                FloatField: grabcut_threshold:
                    tool_tip = "Threshold for the sunshader segmentation."
                    value := main_model.grabcut_threshold

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('OK', 'accept'),
                DialogButton('Cancel', 'reject'),
            ]


#
# A dialog that allows filtering the displayed cameras.
#
enamldef CameraListDialog(Dialog): popup:
    title = 'Camera View Selection'
    attr main_model

    Container:
        constraints = [
            vbox(
                scroller,
                bbox
            ),
            #align('left', scroller, bbox),
        ]

        ScrollArea: scroller:
            Container:
                Looper: looper:
                    iterable << main_model.servers_dict.values()
                    CheckBox:
                        text = 'pb %s' % loop_index

        DialogButtonBox: bbox:
            buttons = [
                DialogButton('OK', 'accept'),
            ]


