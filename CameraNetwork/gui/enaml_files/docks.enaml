from enaml.layout.api import *
from enaml.core.api import Include, Conditional, Looper
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton

from CameraNetwork import global_settings as gs
from CameraNetwork.gui.data_frame_table import DataFrameTable
from traits_enaml.widgets.mayavi_canvas import MayaviCanvas


################################################################################
# ArraysItem
# Displays captured images/arrays.
#
enamldef ArraysItem(DockItem):

    attr arrays
    attr map3d
    attr main

    alias arrays_area
    alias array_views

    Container:
        constraints = [
            vbox(
                hbox(
                    exposure_lbl,
                    exposure_fld,
                    gain_cb,
                    get_pb,
                    clear_pb,
                    spacer,
                ),
                hbox(
                    quality_cnt,
                    resolution_lbl,
                    resolution_fld,
                    spacer,
                ),
                arrays_cont,
                hbox(
                    intensity_lbl,
                    intensity_slider,
                    intensity_txt,
                    gamma_cb,
                    grid_cb,
                    ROIs_cb,
                    masks_cb,
                    spacer,
                    load_pb,
                    save_pb
                )
            ),
        ]

        Label: exposure_lbl:
            text = 'Exp[us]:'
        IntField: exposure_fld:
            minimum = 0
            value = 500

        CheckBox: gain_cb:
            text = 'Gain Boost:'

        Container: quality_cnt:
            constraints = [
                hbox(HDR_cb, JPEG_cb, quality_fld),
            ]

            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False
                text = "HDR"

            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True
                text = "JPEG"

            IntField: quality_fld:
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

        Label: resolution_lbl:
            text = 'Resolution:'
        IntField: resolution_fld:
            minimum = 201
            value = 301

        PushButton: get_pb:
            text = 'Get'
            clicked ::
                map3d.draw_map()
                map3d.draw_grid()
                main.broadcast_message(
                    gs.MSG_TYPE_ARRAY,
                    kwds=dict(
                        exposure_us=exposure_fld.value,
                        gain_db=0,
                        frames_num=1,
                        color_mode=gs.COLOR_RAW,
                        gain_boost=gain_cb.checked,
                        normalize=True,
                        jpeg=quality_fld.value if JPEG_cb.checked else False,
                        resolution=resolution_fld.value
                    )
                )

        PushButton: clear_pb:
            text = 'Clear'
            clicked ::
                arrays.clear_arrays()

        Label: intensity_lbl:
            text = 'Intensity Level'

        Slider: intensity_slider:
            tool_tip = "Control the intensity of the displayed image."
            tracking = False
            tick_interval = 50
            minimum = 1
            maximum = 1000
            value := arrays.intensity_value

        Field: intensity_txt:
            text << u'{}'.format(intensity_slider.value)
            read_only = True

        CheckBox: gamma_cb:
            text = 'Gamma'
            tool_tip = "Apply Gamma correction to the Image"
            checked := arrays.gamma

        Container: arrays_cont:
            FlowArea: arrays_area:
                 Include: array_views:
                     objects << [arrays.array_items[k][1] for k in sorted(arrays.array_items.keys())]

        PushButton: load_pb:
            text = 'Load ROI'
            tool_tip = "Load the ROIs"
            clicked ::
                path = FileDialogEx.get_open_file_name()
                if path:
                    arrays.load_rois(path)

        PushButton: save_pb:
            text = 'Save ROI'
            tool_tip = "Save the ROIs"
            clicked ::
                arrays.save_rois()

        CheckBox: grid_cb:
            text = "Show Grid"
            tool_tip = "Show the reconstrction grid"
            checked := arrays.show_grid

        CheckBox: ROIs_cb:
            text = "Show ROIs"
            tool_tip = "Show the camera ROIs"
            checked := arrays.show_ROIs

        CheckBox: masks_cb:
            text = "Show Masks"
            tool_tip = "Show the camera Masks"
            checked := arrays.show_masks


################################################################################
# Logger
# Logs servers exceptions.
#
enamldef LoggerItem(DockItem):

    attr logger

    Container:
        constraints = [
            hbox(log_field, clear)
        ]

        MultilineField: log_field:
            name = 'line-collector'
            text << logger.text
            font = '9pt Courier'
            read_only = True

        PushButton: clear:
            text = 'Clear'
            clicked ::
                logger.clear()


################################################################################
# Mapper
# Shows a map of haifa with visualization of the cameras.
#
enamldef MapperItem(DockItem):

    attr map3d

    Container:
        constraints = [
            vbox(
                mcanvas,
                hbox(
                    grid_cb,
                    ROIs_cb,
                    spacer
                ),
            ),
        ]

        MayaviCanvas: mcanvas:
            scene << map3d.map_scene
            show_toolbar = True

        CheckBox: grid_cb:
            tool_tip = "Show the reconstrction grid"
            checked := map3d.show_grid
            text = "Show Grid"

        CheckBox: ROIs_cb:
            tool_tip = "Show the camera ROIs"
            checked := map3d.show_ROIs
            text = "Show ROIs"


################################################################################
# Times
# Allows querying, displaying and seeking time table of captured images.
#
enamldef TimesItem(DockItem):

    attr map3d
    attr times
    attr main

    Container:
        constraints = [
            vbox(
                hbox(update_pb, query_day, query_pb, spacer),
                df,
                hbox(resolution_lbl, resolution_fld, quality_cnt, seek_pb, spacer),
            ),
            query_day.width == 90
        ]

        PushButton: update_pb:
            text = 'Update Days'
            clicked ::
                times.days_list = []
                main.broadcast_message(
                    gs.MSG_TYPE_DAYS,
                )

        ObjectCombo: query_day:
            items << times.days_list

        PushButton: query_pb:
            text = 'Query'
            clicked ::
                times.clear()
                main.broadcast_message(
                    gs.MSG_TYPE_QUERY,
                    kwds=dict(query_date=query_day.selected)
                )

        DataFrameTable: df:
            data_frame << times.images_df
            selected_index >> times.img_index

        Label: resolution_lbl:
            text = 'Resolution:'
        IntField: resolution_fld:
            minimum = 64
            maximum = 1001
            value = 301

        Container: quality_cnt:
            constraints = [
                hbox(HDR_cb, JPEG_cb, quality_fld),
            ]

            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False
                text = "HDR"

            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True
                text = "JPEG"

            IntField: quality_fld:
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

        PushButton: seek_pb:
            text = 'Seek'
            clicked ::
                map3d.draw_map()
                map3d.draw_grid()
                index = times.img_index
                main.broadcast_message(
                    gs.MSG_TYPE_SEEK,
                    kwds=dict(
                        seek_time=index[0],
                        hdr_index=-1 if HDR_cb.checked else index[1],
                        normalize=True,
                        jpeg=quality_fld.value if JPEG_cb.checked else False,
                        resolution=resolution_fld.value
                    )
                )

