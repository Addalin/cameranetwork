from enaml.layout.api import *
from enaml.core.api import Include, Conditional, Looper
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton

from CameraNetwork import global_settings as gs
from CameraNetwork.gui.data_frame_table import DataFrameTable
from CameraNetwork.gui.image_analysis import ImageAnalysis
from traits_enaml.widgets.mayavi_canvas import MayaviCanvas

from .extra import GradientButtonSheet
from .popups import ImageDataPopup
from .server_pages import (MainControlsPage, ImageControlPage, SeekControlPage,
    SunshaderControlPage, SprinklerControlPage, IntrinsicControlPage,
    ExtrinsicControlPage, RadiometricControlPage)


################################################################################
# The Server view
################################################################################
enamldef ServerView(DockItem):
    attr server_model

    attr server_id

    GradientButtonSheet:
        pass

    VGroup:
        Notebook:
            tab_style = 'preferences'

            MainControlsPage:
                title = 'Main'
                closable = False
                server_model_ = server_model

            ImageControlPage: image_page:
                title = 'Image'
                closable = False
                server_model_ = server_model

            SeekControlPage:
                title = 'Seek'
                closable = False
                server_model_ = server_model

            SunshaderControlPage:
                title = 'Sun Shader'
                closable = False
                server_model_ = server_model
                sunshader_angle_value << server_model.sunshader_required_angle

            SprinklerControlPage:
                title = 'Sprinkle'
                closable = False
                server_model_ = server_model

            IntrinsicControlPage:
                title = 'Intrinsic'
                closable = False
                server_model_ = server_model
                exposure_us << image_page.ff_exposure
                gain_db << image_page.ff_gain
                gain_boost<< image_page.ff_gain_boost

            ExtrinsicControlPage:
                title = 'Extrinsic'
                closable = False
                server_model_ = server_model

            RadiometricControlPage:
                title = 'Radiometric'
                closable = False
                sunphotometer_times = []
                server_model_ = server_model

        GroupBox:
            title = 'Message'

            constraints = [
                grid(
                    [lb_cmd,   fld_cmd,   pb_send],
                    [lb_reply, fld_reply, pb_data],
                    column_align='width',
                    row_align='v_center',
                ),
            ]

            Label: lb_cmd:
                text = 'Cmd:'
            Field: fld_cmd:
                text := server_model.cmd
            PushButton: pb_send:
                text = 'Send'
                clicked :: root_object().client_model.send_message(server_model)
            PushButton: pb_data:
                text = 'Data'
                clicked ::
                    popup = MsgDataPopup(msg_data=server_model.reply_data).show()
            Label: lb_reply:
                text = 'Reply:'
            Field: fld_reply:
                text << server_model.reply


################################################################################
# The Array View
################################################################################
enamldef ArrayView(FlowItem):
    alias img_array: image_widget.img_array
    alias title : gb.title
    alias server_id : image_widget.server_id
    alias image_widget
    alias Almucantar_coords: image_widget.Almucantar_coords
    alias PrincipalPlane_coords: image_widget.PrincipalPlane_coords

    attr array_model
    attr arrays_model
    attr img_data

    GroupBox: gb:
        ImageAnalysis: image_widget:
            img_array << array_model.img_array
            Almucantar_coords << array_model.Almucantar_coords
            PrincipalPlane_coords << array_model.PrincipalPlane_coords
            GRID_coords << array_model.GRID_coords
            Epipolar_coords << array_model.GRID_coords
            server_id << array_model.server_id
            gamma << arrays_model.gamma
            intensity << arrays_model.intensity
            show_grid << arrays_model.show_grid
            show_mask << arrays_model.show_masks
            show_ROI << arrays_model.show_ROIs

        HGroup:
            CheckBox: almucantar:
                tool_tip = "Show the Almucantar"
                checked := image_widget.show_almucantar
                text = "Almucantar"

            CheckBox: principal:
                tool_tip = "Show the PrincipalPlane"
                checked := image_widget.show_principalplane
                text = "PrincipalPlane"

            PushButton:
                text = 'Image Data'
                clicked ::
                    ImageDataPopup(img_data_=img_data).show()

            CheckBox: export_flag:
                tool_tip = "Export for reconstruction"
                text = "Export"


################################################################################
# ArraysView
# Displays captured images/arrays.
#
enamldef ArraysView(DockItem):

    attr arrays
    attr main

    alias arrays_area
    alias array_views

    Container:
        constraints = [
            vbox(
                hbox(
                    exposure_lbl,
                    exposure_fld,
                    gain_cb,
                    get_pb,
                    clear_pb,
                    spacer,
                ),
                hbox(
                    quality_cnt,
                    resolution_lbl,
                    resolution_fld,
                    spacer,
                ),
                arrays_cont,
                hbox(
                    intensity_lbl,
                    intensity_slider,
                    intensity_txt,
                    gamma_cb,
                    grid_cb,
                    ROIs_cb,
                    masks_cb,
                    spacer,
                    load_pb,
                    save_pb
                )
            ),
        ]

        Label: exposure_lbl:
            text = 'Exp[us]:'
        IntField: exposure_fld:
            minimum = 0
            value = 500

        CheckBox: gain_cb:
            text = 'Gain Boost:'

        Container: quality_cnt:
            constraints = [
                hbox(HDR_cb, JPEG_cb, quality_fld),
            ]

            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False
                text = "HDR"

            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True
                text = "JPEG"

            IntField: quality_fld:
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

        Label: resolution_lbl:
            text = 'Resolution:'
        IntField: resolution_fld:
            minimum = 201
            value = 301

        PushButton: get_pb:
            text = 'Get'
            clicked ::
                main.clear_map()
                main.broadcast_message(
                    gs.MSG_TYPE_ARRAY,
                    kwds=dict(
                        exposure_us=exposure_fld.value,
                        gain_db=0,
                        frames_num=1,
                        color_mode=gs.COLOR_RAW,
                        gain_boost=gain_cb.checked,
                        normalize=True,
                        jpeg=quality_fld.value if JPEG_cb.checked else False,
                        resolution=resolution_fld.value
                    )
                )

        PushButton: clear_pb:
            text = 'Clear'
            clicked ::
                arrays.clear_arrays()

        Label: intensity_lbl:
            text = 'Intensity Level'

        Slider: intensity_slider:
            tool_tip = "Control the intensity of the displayed image."
            tracking = False
            tick_interval = 50
            minimum = 1
            maximum = 1000
            value := arrays.intensity

        Field: intensity_txt:
            text << u'{}'.format(intensity_slider.value)
            read_only = True

        CheckBox: gamma_cb:
            text = 'Gamma'
            tool_tip = "Apply Gamma correction to the Image"
            checked := arrays.gamma

        Container: arrays_cont:
            FlowArea: arrays_area:
                Include: array_views:
                    objects << [
                        ArrayView(
                            title=si,
                            server_id=si,
                            array_model=arrays.array_items[si],
                            arrays_model=arrays
                        ) for si in sorted(arrays.array_items.keys())
                    ]

        PushButton: load_pb:
            text = 'Load ROI'
            tool_tip = "Load the ROIs"
            clicked ::
                path = FileDialogEx.get_open_file_name()
                if path:
                    arrays.load_rois(path)

                    #def load_rois(self, path='./ROIS.pkl'):
                        #"""Apply the saved rois on the current arrays."""

                        #try:
                            #with open(path, 'rb') as f:
                                #rois_dict, masks_dict, array_shapes = cPickle.load(f)

                            #for server_id, (_, array_view) in self.array_items.items():
                                #if server_id not in rois_dict:
                                    #continue

                                #array_view.ROI.setState(rois_dict[server_id])
                                #array_view.mask_ROI.setState(masks_dict[server_id])
                                #array_view.image_widget.update_ROI_resolution(array_shapes[server_id])

                        #except Exception as e:
                            #logging.error(
                                #"Failed setting rois to Arrays view:\n{}".format(
                                    #traceback.format_exc()))

        PushButton: save_pb:
            text = 'Save ROI'
            tool_tip = "Save the ROIs"
            #clicked ::
                #if base_path is None:
                    #base_path = pkg_resources.resource_filename("CameraNetwork", "../data/ROIS")
                    #if not os.path.exists(base_path):
                        #os.makedirs(base_path)

                #dst_path = os.path.join(
                    #base_path,
                    #self.img_index[0].to_pydatetime().strftime("%Y_%m_%d_%H_%M_%S.pkl")
                #)

                #rois_dict = {}
                #masks_dict = {}
                #array_shapes = {}
                #for server_id, (_, array_view) in self.array_items.items():
                    #rois_dict[server_id] = array_view.ROI.saveState()
                    #masks_dict[server_id] = array_view.mask_ROI.saveState()
                    #array_shapes[server_id] = array_view.img_array.shape[:2]

                #with open(dst_path, 'wb') as f:
                    #cPickle.dump((rois_dict, masks_dict, array_shapes), f)

        CheckBox: grid_cb:
            text = "Show Grid"
            tool_tip = "Show the reconstrction grid"
            checked := arrays.show_grid

        CheckBox: ROIs_cb:
            text = "Show ROIs"
            tool_tip = "Show the camera ROIs"
            checked := arrays.show_ROIs

        CheckBox: masks_cb:
            text = "Show Masks"
            tool_tip = "Show the camera Masks"
            checked := arrays.show_masks


################################################################################
# Logger
# Logs servers exceptions.
#
enamldef LoggerView(DockItem):

    attr logger

    Container:
        constraints = [
            vbox(
                log_field,
                hbox(spacer, clear)
            )
        ]

        MultilineField: log_field:
            name = 'line-collector'
            text << logger.text
            font = '9pt Courier'
            read_only = True

        PushButton: clear:
            text = 'Clear'
            clicked ::
                logger.clear()


################################################################################
# Mapper
# Shows a map of haifa with visualization of the cameras.
#
enamldef MapperView(DockItem):

    attr map3d

    Container:
        constraints = [
            vbox(
                mcanvas,
                hbox(
                    grid_cb,
                    ROIs_cb,
                    spacer
                ),
            ),
        ]

        MayaviCanvas: mcanvas:
            scene << map3d.map_scene
            show_toolbar = True

        CheckBox: grid_cb:
            tool_tip = "Show the reconstrction grid"
            checked := map3d.show_grid
            text = "Show Grid"

        CheckBox: ROIs_cb:
            tool_tip = "Show the camera ROIs"
            checked := map3d.show_ROIs
            text = "Show ROIs"


################################################################################
# Times
# Allows querying, displaying and seeking time table of captured images.
#
enamldef TimesView(DockItem):

    attr main
    attr times

    Container:
        constraints = [
            vbox(
                hbox(update_pb, query_day, query_pb, spacer),
                df,
                hbox(resolution_lbl, resolution_fld, quality_cnt, seek_pb, spacer),
            ),
            query_day.width == 90
        ]

        PushButton: update_pb:
            text = 'Update Days'
            clicked ::
                times.days_list = []
                main.broadcast_message(
                    gs.MSG_TYPE_DAYS,
                )

        ObjectCombo: query_day:
            items << times.days_list

        PushButton: query_pb:
            text = 'Query'
            clicked ::
                times.clear()
                main.broadcast_message(
                    gs.MSG_TYPE_QUERY,
                    kwds=dict(query_date=query_day.selected)
                )

        DataFrameTable: df:
            data_frame << times.images_df
            selected_index >> times.img_index

        Label: resolution_lbl:
            text = 'Resolution:'
        IntField: resolution_fld:
            minimum = 64
            maximum = 1001
            value = 301

        Container: quality_cnt:
            constraints = [
                hbox(HDR_cb, JPEG_cb, quality_fld),
            ]

            RadioButton: HDR_cb:
                tool_tip = "Return HDR image"
                checked = False
                text = "HDR"

            RadioButton: JPEG_cb:
                tool_tip = "Use JPEG compression"
                checked = True
                text = "JPEG"

            IntField: quality_fld:
                minimum = gs.MIN_JPEG_QUALITY
                value = 80
                maximum = 100
                enabled << JPEG_cb.checked

        PushButton: seek_pb:
            text = 'Seek'
            clicked ::
                main.clear_map()
                index = times.img_index
                main.broadcast_message(
                    gs.MSG_TYPE_SEEK,
                    kwds=dict(
                        seek_time=index[0],
                        hdr_index=-1 if HDR_cb.checked else index[1],
                        normalize=True,
                        jpeg=quality_fld.value if JPEG_cb.checked else False,
                        resolution=resolution_fld.value
                    )
                )



################################################################################
# Servers
# Shows the complete list of connected servers.
#
enamldef ServerButton(FlowItem):

    attr main
    attr server_id
    attr server

    Container:
        PushButton:
            text = str(server_id)
            clicked ::

                name = 'camera_%s' % server_id
                title = 'Camera %s' % server_id

                if name not in [item.name for item in root_object().dock_area.dock_items()]:
                    item = ServerView(
                        root_object().dock_area,
                        name=name,
                        title=title,
                        server_model=server,
                        server_id=server_id,
                        closable=True
                    )

                    root_object().dock_area.update_layout(
                        FloatItem(
                            item=name
                        )
                    )


enamldef ServersView(DockItem):

    attr main

    Container:
        constraints = [
            vbox(servers_cont)
        ]

        Container: servers_cont:
            FlowArea: servers_area:
                Include: servers_inc:
                    objects << [
                        ServerButton(
                            main=main,
                            server_id=si,
                            server=main.servers_dict[si]
                        ) for si in sorted(main.servers_dict.keys())
                   ]

