from .docks import ArraysItem, LoggerItem, MapperItem, ServersItem, TimesItem

from enaml.layout.api import *
from enaml.core.api import Include, Conditional, Looper
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import *
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogInstructionArea, TaskDialogStyleSheet)
from enaml.stdlib.message_box import (MessageBox, about, critical, information,
    question, warning)

from .popups import (ImageDataPopup, MsgDataPopup, ThumbPopup)
from .settings import (GlobalSettingsDialog, SettingsDialog, ReconstructDialog, CameraListDialog)

from CameraNetwork import global_settings as gs
from CameraNetwork.mdp import MDP
import numpy as np
import time

from CameraNetwork.gui.PyQtWidgets import PyQtImageView


################################################################################
# The Array View
################################################################################
enamldef ArrayView(FlowItem):
    alias img_array: image_widget.img_array
    alias title : gb.title
    alias server_id : image_widget.server_id
    alias image_widget
    alias epipolar_points: image_widget.epipolar_points
    alias Almucantar_coords: image_widget.Almucantar_coords
    alias PrincipalPlane_coords: image_widget.PrincipalPlane_coords
    alias ROI: image_widget.ROI
    alias mask_ROI: image_widget.mask_ROI
    alias export_flag

    attr arrays
    attr img_data

    GroupBox: gb:
        PyQtImageView: image_widget:
            show_ROI := arrays.show_ROI
            show_mask := arrays.show_mask
            show_grid := arrays.show_grid
            intensity := arrays.intensity
            gamma := arrays.gamma

        HGroup:
            CheckBox: almucantar:
                tool_tip = "Show the Almucantar"
                checked := image_widget.show_almucantar
                text = "Almucantar"

            CheckBox: principal:
                tool_tip = "Show the PrincipalPlane"
                checked := image_widget.show_principalplane
                text = "PrincipalPlane"

            PushButton:
                text = 'Image Data'
                clicked ::
                    ImageDataPopup(img_data_=img_data).show()

            CheckBox: export_flag:
                tool_tip = "Export for reconstruction"
                checked := image_widget.export_flag
                text = "Export"


################################################################################
# The main dockarea.
################################################################################
enamldef MyDockArea(DockArea):
    attr main_model
    attr logger_model
    attr map3d_model
    attr times_model
    attr arrays_model

    alias array_views: arrays_dockitem.array_views

    layout = HSplitLayout(
        VSplitLayout(
            TabLayout('arrays', 'times'),
            HSplitLayout(
                'servers', TabLayout('logger', 'map')
            )
        ),
    )

    ArraysItem: arrays_dockitem:
        map3d = map3d_model
        arrays = arrays_model
        main = main_model
        name = 'arrays'
        title = 'Arrays'
        closable = False

    LoggerItem: logger_dockitem:
        logger = logger_model
        name = 'logger'
        title = 'Logger'
        closable = False

    TimesItem: times_dockitem:
        map3d = map3d_model
        main = main_model
        times = times_model
        name = 'times'
        title = 'Times'
        closable = False

    MapperItem: mapper_dockitem:
        map3d = map3d_model
        name = 'map'
        title = 'Map'
        closable = False

    ServersItem: servers_dockitem:
        main = main_model
        name = 'servers'
        title = 'Servers'
        closable = False


################################################################################
# The Main View
################################################################################
def reboot_servers(button, client_model):
    if button is not None:
        if button.text == 'Reboot':
            client_model.broadcast_message(gs.MSG_TYPE_REBOOT)


def restart_servers(button, client_model):
    if button is not None:
        if button.text == 'Restart':
            client_model.broadcast_message(gs.MSG_TYPE_RESTART)


enamldef Main(MainWindow): main:
    initial_size = (200, 200)
    title = 'Camera Client'

    attr client_model

    alias dock_area
    alias array_views : dock_area.array_views

    MenuBar:
        Menu:
            title = "&Global Actions"
            Action:
                text = "Update Tunnels\tCtrl+N"
                triggered :: client_model.send_mmi(MDP.MMI_TUNNELS)

            Menu:
                title = "Tunnels"
                Looper: column_looper:
                    iterable << sorted(client_model.tunnels_dict.items())
                    Action:
                        text = "Camera {}, port {}".format(loop_item[0], loop_item[1]['tunnel_port'])
                        triggered :: client_model.open_tunnel(loop_item[0], loop_item[1])
            Action:
                separator = True
            Action:
                text = "Loop\tCtrl+L"
                triggered ::
                    client_model.broadcast_message(gs.MSG_TYPE_LOOP)
            Action:
                text = "Unloop\tCtrl+U"
                triggered ::
                    client_model.broadcast_message(gs.MSG_TYPE_HALT)
            Action:
                separator = True
            Action:
                text = "Status\tCtrl+M"
                triggered ::
                    client_model.broadcast_message(gs.MSG_TYPE_STATUS)
            Action:
                text = "Settings\tCtrl+S"
                triggered ::
                    hresult = GlobalSettingsDialog(
                        main,
                        client_model=client_model,
                    ).exec_()

                    if hresult:
                        client_model.broadcast_message(
                            gs.MSG_TYPE_SET_SETTINGS,
                            kwds=dict(
                                camera_settings=None,
                                capture_settings=client_model.capture_settings
                            )
                        )
            Action:
                separator = True
            Action:
                text = "Restart\tCtrl+T"
                triggered ::
                    btns = [DialogButton('Restart', 'accept'),
                            DialogButton('Cancel', 'reject')]
                    restart_servers(
                        warning(main, 'Restart Cameras', 'Are you sure you want to restart all cameras?', btns),
                        client_model
                    )
            Action:
                text = "Reboot\tCtrl+R"
                triggered ::
                    btns = [DialogButton('Reboot', 'accept'),
                            DialogButton('Cancel', 'reject')]
                    reboot_servers(
                        warning(main, 'Reboot Cameras', 'Are you sure you want to reboot all cameras?', btns),
                        client_model
                    )

        #Menu:
            #title = "&View"
            #Action:
                #text = 'Cameras List'
                #triggered ::
                    #hresult = CameraListDialog(
                        #main,
                        #client_model=client_model,
                    #).exec_()

        Menu:
            title = "&Reconstruct"
            Action:
                text = "Export\tCtrl+E"
                triggered ::
                    hresult = ReconstructDialog(
                        client_model=client_model
                    ).exec_()

                    if hresult:
                        client_model.exportData()

    Container:
        MyDockArea: dock_area:
            logger_model = client_model.logger
            map3d_model = client_model.map3d
            times_model = client_model.times
            arrays_model = client_model.arrays
            main_model = client_model

    StatusBar:
        StatusItem:
            Label:
                text = "Status"
            ProgressBar: progress:
                value := client_model.export_progress